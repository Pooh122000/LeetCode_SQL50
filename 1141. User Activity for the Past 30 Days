Solve using CTE:
1141. User Activity for the Past 30 Days 
Easy

Table: Activity

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| session_id    | int     |
| activity_date | date    |
| activity_type | enum    |
+---------------+---------+
This table may have duplicate rows.
The activity_type column is an ENUM (category) of type ('open_session', 'end_session', 'scroll_down', 'send_message').
The table shows the user activities for a social media website. 
Note that each session belongs to exactly one user.
 

Write a solution to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on someday if they made at least one activity on that day.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Activity table:
+---------+------------+---------------+---------------+
| user_id | session_id | activity_date | activity_type |
+---------+------------+---------------+---------------+
| 1       | 1          | 2019-07-20    | open_session  |
| 1       | 1          | 2019-07-20    | scroll_down   |
| 1       | 1          | 2019-07-20    | end_session   |
| 2       | 4          | 2019-07-20    | open_session  |
| 2       | 4          | 2019-07-21    | send_message  |
| 2       | 4          | 2019-07-21    | end_session   |
| 3       | 2          | 2019-07-21    | open_session  |
| 3       | 2          | 2019-07-21    | send_message  |
| 3       | 2          | 2019-07-21    | end_session   |
| 4       | 3          | 2019-06-25    | open_session  |
| 4       | 3          | 2019-06-25    | end_session   |
+---------+------------+---------------+---------------+
Output: 
+------------+--------------+ 
| day        | active_users |
+------------+--------------+ 
| 2019-07-20 | 2            |
| 2019-07-21 | 2            |
+------------+--------------+ 
Explanation: Note that we do not care about days with zero active users.


SOLUTION:
# Write your MySQL query statement below
WITH 
  daily_activity AS (
    SELECT 
      activity_date AS day,
      user_id
    FROM 
      Activity
    WHERE 
      activity_date BETWEEN '2019-06-28' AND '2019-07-27'
    GROUP BY 
      activity_date, user_id
  ),
  daily_active_users AS (
    SELECT 
      day,
      COUNT(DISTINCT user_id) AS active_users
    FROM 
      daily_activity
    GROUP BY 
      day
  )
SELECT 
  *
FROM 
  daily_active_users
ORDER BY 
  day;

Here's how it works:

1. The first CTE, daily_activity, selects the activity_date and user_id from the Activity table, grouping by both columns. It also filters the dates to include only the past 30 days ending 2019-07-27.
2. The second CTE, daily_active_users, counts the number of distinct user_id values for each day, giving the daily active user count.
3. The final query selects all columns from the daily_active_users CTE and orders the results by day.

